local colors = {
    Blue = Color3.fromRGB(70, 119, 255),
    Background = Color3.fromRGB(4, 7, 10),
    White = Color3.fromRGB(255, 255, 255),
    Red = Color3.fromRGB(252, 65, 48),
    Green = Color3.fromRGB(77, 172, 104),
}

local TweenService = game:GetService("TweenService")
local uis = game:GetService("UserInputService")

local liquidbounce = {}
liquidbounce.__index = liquidbounce

local props = game:GetObjects("rbxassetid://17901186362")[1]:Clone()

local function p(f, t)
    for i, v in pairs(f:GetChildren()) do
        if not v:IsA("UIComponent") then
            v:Clone().Parent = t
        end
    end
    t.Name = f.Name
    t.Size = f.Size
    t.Position = f.Position
    t.AnchorPoint = f.AnchorPoint
    t.BorderColor3 = f.BorderColor3
    t.BorderSizePixel = 0
    t.Rotation = f.Rotation
    t.LayoutOrder = f.LayoutOrder
    t.ZIndex = f.ZIndex
    t.Visible = f.Visible
    t.Active = f.Active
    t.ClipsDescendants = f.ClipsDescendants
end

local descendants = props:GetDescendants()
for i, v in pairs(descendants) do
    if v:IsA("ImageButton") then
        local textbutton = Instance.new("TextButton")
        p(v, textbutton)
        textbutton.Text = ""
        textbutton.Parent = v.Parent
        v:Destroy()
    elseif v:IsA("ImageLabel") then
        local textlabel = Instance.new("TextLabel")
        p(v, textlabel)
        textlabel.Text = ""
        textlabel.Parent = v.Parent
        v:Destroy()
    end
end

local modulesfolder
local bg = Instance.new("BlurEffect")
local guiscale = Instance.new("UIScale")

function liquidbounce.new()
    local self = setmetatable({}, liquidbounce)
    self.objects = {}
    self.root = Instance.new("ScreenGui")
    self.root.IgnoreGuiInset = true
    self.root.Name = "liquidbounce"
    self.root.ResetOnSpawn = false
    guiscale.Scale = 1
    guiscale.Parent = self.root
    bg.Size = 50
    bg.Parent = game:GetService("Lighting")
    local background = props.Background:Clone()
    local notification = props.NotificationContainer and props.NotificationContainer:Clone()
    notification.Position = UDim2.new(0.78399986, 0, 0.304609954, 0)
    notification.Parent = self.root
    modulesfolder = Instance.new("Folder")
    modulesfolder.Name = "Modules"
    modulesfolder.Parent = self.root
    background.Parent = self.root
    background.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    self.root.Parent = (gethui and gethui()) or game:GetService("CoreGui"):FindFirstChild("RobloxGui")

    local function showmodules()
        local ti = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)

        for i, v in pairs(modulesfolder:GetChildren()) do
            if v:IsA("Frame") or v:IsA("GuiObject") then
                v.Visible = not v.Visible
                local bgsize = v.Visible and 50 or 0
                local guis = v.Visible and 1 or 0
                game:GetService("TweenService"):Create(bg, TweenInfo.new(0.25), {Size = bgsize}):Play()
                game:GetService("TweenService"):Create(guiscale, TweenInfo.new(0.25), {Scale = guis}):Play()

                background.Visible = not background.Visible
            end
        end
    end

    uis.InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.LeftControl then
            showmodules()
        end
    end)

    return self
end

function liquidbounce:CreateCategory(title, icon)
    local category = props.Category:Clone()
    category.Name = title or "Category"
    category.Parent = modulesfolder
    category.BackgroundTransparency = 0.3

    local selfobj = #self.objects
    local xoffset = selfobj * (category.AbsoluteSize.X + 10)

    category.Position = UDim2.new(0, 10 + xoffset, 0, 80)

    local topbar = category.TopBar
    local categorytitle = topbar.CategoryTitle
    local categoryicon = topbar.CategoryIcon

    category.DropShadowHolder.DropShadow.BackgroundTransparency = 1

    topbar.Minimize.Position = UDim2.new(0.837349415, 0, 0.49000001, 0)
    topbar.Minimize.Size = UDim2.new(0, 30, 0, 5)
    topbar.Minimize.BackgroundColor3 = colors.White

    local uICorner = Instance.new("UICorner")
    uICorner.Name = "UICorner"
    uICorner.CornerRadius = UDim.new(10, 50)
    uICorner.Parent = categoryicon
    categoryicon.BackgroundColor3 = colors.White

    categorytitle.Text = title or tostring(math.random(1, 3584))

    table.insert(self.objects, category)
    return category
end

function liquidbounce:CreateModule(root, text, callback)
    local container = root:FindFirstChild("Container")

    if not container then
        container = props.Objects.Container:Clone()
        container.Name = "Container"
        container.Parent = root
    end

    local module = props.Objects.Module:Clone()
    module.BackgroundColor3 = colors.Background
    module.Parent = container
    module.Text = text or "test"

    local sc = props.Objects.SettingsContainer:Clone()
    sc.Name = "SettingsContainer"
    sc.Parent = module
    sc.Visible = false
    sc.Size = UDim2.new(0, 250, 1, 33297)

    local arrow = module.Arrow
    arrow.BackgroundTransparency = 1

    local function toggleModule()
        local opened = false
        opened = not opened
        module.SettingsContainer.Visible = opened
        arrow.Rotation = opened and 90 or 0
    end

    module.MouseButton1Click:Connect(function()
        callback(toggleModule)
    end)

    return module
end

function liquidbounce:CreateToggle(module, text, callback)
    local toggle = props.Objects.Toggle:Clone()
    toggle.Text = text
    toggle.Parent = module.SettingsContainer
    toggle.Size = UDim2.new(0, 200, 0, 25)

    toggle.MouseButton1Click:Connect(function()
        callback(toggle.Text)
    end)

    return toggle
end

function liquidbounce:CreateSlider(module, text, min, max, default, callback)
    local slider = props.Objects.Slider:Clone()
    slider.Text = text
    slider.Parent = module.SettingsContainer
    slider.Size = UDim2.new(0, 200, 0, 25)
    slider.Value = default

    slider.MouseButton1Click:Connect(function()
        callback(slider.Value)
    end)

    return slider
end

function liquidbounce:CreateDropdown(module, text, options, callback)
    local dropdown = props.Objects.Dropdown:Clone()
    dropdown.Text = text
    dropdown.Parent = module.SettingsContainer
    dropdown.Size = UDim2.new(0, 200, 0, 25)

    for _, option in pairs(options) do
        local optionItem = Instance.new("TextButton")
        optionItem.Text = option
        optionItem.Size = UDim2.new(0, 200, 0, 25)
        optionItem.Parent = dropdown

        optionItem.MouseButton1Click:Connect(function()
            callback(option)
        end)
    end

    return dropdown
end

return liquidbounce
